/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package me.let.helper;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

import java.util.HashSet;
import java.util.Set;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import me.let.gen.helper.OverkillUniqueStringGenerator;

public class OverkillUniqueStringGeneratorTest {
    private OverkillUniqueStringGenerator overkillUniqueStringGenerator;

    @Before
    public void init(){
        this.overkillUniqueStringGenerator = new OverkillUniqueStringGenerator(3, new HashSet<>());

    }

    @Test public void test_generateValid() {
        final int length = 100;
        final String str = overkillUniqueStringGenerator.generate(100);
        assertNotNull(str);
        assertEquals(length, str.length());
    }

    @Test(expected = IllegalArgumentException.class)
    public void test_generateInvalidLength() {
        overkillUniqueStringGenerator.generate(0);
    }

    @Test(expected = IllegalArgumentException.class)
    public void test_generateInvalidMaxUnluckyRolls() {
        new OverkillUniqueStringGenerator(-1, new HashSet<>());
    }

    @Test(expected = IllegalArgumentException.class)
    public void test_generateInvalidUniqueStrStorage() {
        new OverkillUniqueStringGenerator(1, null);
    }

    @Test(expected = IllegalStateException.class)
    public void test_generateUnluckRollsTriggered(){
        //mock uniqueStrStorage to simulate unlucky rolls by always return false when add() is called
        Set<String> uniqueStrStorage = Mockito.mock(Set.class);
        Mockito.when(uniqueStrStorage.add(Mockito.anyString())).thenReturn(false);

        overkillUniqueStringGenerator = new OverkillUniqueStringGenerator(3, uniqueStrStorage);
        overkillUniqueStringGenerator.generate(100);
    }
}
