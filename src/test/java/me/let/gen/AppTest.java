/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package me.let.gen;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.when;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.List;
import java.util.Map;

import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.TemporaryFolder;
import org.mockito.Mockito;

import me.let.gen.helper.IUniqueStringGenerator;

public class AppTest {
    @Rule public TemporaryFolder temporaryFolder = new TemporaryFolder();

    @Test
    public void test_parseArgs() {
        Map<String, String> argMap;

        String[] args = {};
        argMap = App.parseArgs(args);

        assertNotNull(argMap);
        assertTrue(argMap.isEmpty());

        args = new String[] { "op1", "v1", "op2", "v2" };
        argMap = App.parseArgs(args);

        assertNotNull(argMap);
        assertEquals(2, argMap.size());
    }

    @Test(expected = IndexOutOfBoundsException.class)
    public void test_parseArgsInvalid() {
        String[] args = new String[] { "op1", "v1", "op2" };
        Map<String, String> argMap = App.parseArgs(args);

        assertNotNull(argMap);
        assertEquals(2, argMap.size());
    }

    @Test
    public void test_createFile() throws IOException {
        String uniqueStr = "This is a unique string";

        IUniqueStringGenerator uniqueStringGenerator = Mockito.mock(IUniqueStringGenerator.class);
        when(uniqueStringGenerator.generate(Mockito.anyInt())).thenReturn(uniqueStr);

        App app = new App(uniqueStringGenerator);
        assertNotNull(app);

        File tempFile = temporaryFolder.newFile("create_file_test.txt");
        app.createFile(tempFile.getAbsolutePath(), 1, 100);
        
        List<String> lines = Files.readAllLines(tempFile.toPath());
        assertEquals(1, lines.size());
        assertEquals(uniqueStr, lines.get(0));
    }
}
