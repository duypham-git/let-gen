/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package me.let.gen;

import java.io.FileWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

import me.let.gen.helper.IUniqueStringGenerator;
import me.let.gen.helper.OverkillUniqueStringGenerator;

public class App {
    
    private IUniqueStringGenerator uniqueStringGenerator;

    public App(){
        uniqueStringGenerator = new OverkillUniqueStringGenerator(3, new HashSet<>());
    }

    public App(IUniqueStringGenerator uniqueStringGenerator){
        this.uniqueStringGenerator = uniqueStringGenerator;
    }

    public void createFile(String filePath, int noOfLine, int strLengh) throws IOException {
        System.out.println("creating file: " + noOfLine + " lines");

        try(FileWriter writer = new FileWriter(filePath)) {
            for (int i = 0; i < noOfLine; i++) {
                writer.write(uniqueStringGenerator.generate(strLengh) + System.getProperty("line.separator"));
            }
        } catch (IOException e) {
            throw e;
        }
        System.out.println("file created");
    }

    public static void main(String[] args) throws Exception {
        //-nol 230 -cl 100 -fp test.txt
        try {
            Map<String, String> argMap = parseArgs(args);

            new App()
                .createFile(argMap.get("-fp"), 
                            Integer.parseInt(argMap.get("-nol")), 
                            Integer.parseInt(argMap.get("-cl")));
        } catch (Exception e) {
            e.printStackTrace();
        }     
    }

    public static Map<String, String> parseArgs(String[] args) {
        List<String> argKeyList = IntStream
        .range(0, args.length)
        .filter(index -> index % 2 == 0)
        .mapToObj(index -> args[index])
        .collect(Collectors.toList());

        List<String> argValueList = IntStream
                .range(0, args.length)
                .filter(index -> index % 2 != 0)
                .mapToObj(index -> args[index])
                .collect(Collectors.toList());

        Map<String, String> argMap = IntStream
                .range(0, argKeyList.size())
                .boxed()
                .collect(Collectors.toMap(argKeyList::get, argValueList::get));
        
        return argMap;
    }
    
}
